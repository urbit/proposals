## `~littel-ponnys`
Today we began the process of converting Ford-turbo to tracking the status of builds with a per-build state machine. This is a substantial reorganization of the `+ford-state`, with about fifteen of the fields moving into one `(map build build-status)`, where `+build-status` contains the state of construction (`%untried`, `%blocked`, or `%complete`) and all the bidirectional linkages to other builds: `dependencies` (formerly `components`), `provisional-dependencies`, and `blocks`.

We expect this refactor to take the next few weeks. The first stage is a direct translation of the latest ford-turbo branch, not including any caching. This will take us from working state to working state. The next stage will involve porting the cache work that ~rovnys worked on for the past few weeks into the state machine.

We expect the refactored Ford-turbo to be much easier to reason about, since a lot of the difficulty working with current Ford-turbo came from attempting to ascertain the current state of a build by collating several different heterogeneous pieces of state. Every once in a while, we’d discover our implicit state machine was missing a bit that we needed -- often something regarding listeners: were they live, which ones have we responded to already, etc. -- and we’d have to add a new field to the global state, ensure it was always mutated in such a way as to remain in sync with other fields, and devise a resource freeing path for `+cleanup`.

Condensing most of the state into one `+build-status` per build removes several possibilities to lose synchronization between pieces of the state, it simplifies `+cleanup`, it makes it easier to understand the current state of a build, and it might even have performance benefits, since instead of performing several log(n) lookups per operation, we will usually only have to perform one log(n) lookup to find the relevant `+build-status`.

The biggest downside that we’re aware of to the state machine approach is that recursive traversals of build DAGs are somewhat more mechanically complicated, since there’s an extra step of redirection per lookup. We believe we’ve solved this already, and the code is a bit ugly but contained.

[Latest WIP commit](https://github.com/urbit/arvo/commit/847d5e3dcf8173f6f564898509cbc71832489a6e)